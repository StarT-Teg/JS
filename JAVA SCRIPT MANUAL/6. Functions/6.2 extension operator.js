// Остаточные параметры (...)
// Вызывать функцию можно с любым количеством аргументов независимо от того, как она была определена.

// В примере первые несколько параметров добавятся в переменные, а остальные – соберуться в массив.
function showName(firstName, lastName, ...titles) {
  alert( firstName + ' ' + lastName ); // Юлий Цезарь

  // Оставшиеся параметры пойдут в массив
  // titles = ["Консул", "Император"]
  alert( titles[0] ); // Консул
  alert( titles[1] ); // Император
  alert( titles.length ); // 2
}

showName("Юлий", "Цезарь", "Консул", "Император");




// Оператор расширения (...)
// Когда ...arr используется при вызове функции, он «расширяет» перебираемый объект arr в список аргументов.


let arr1 = [1, -2, 3, 4];
let arr2 = [8, 3, -8, 1];

// Добавляем аргумент, потом расиряем массив на агрументы и т.д.
// В итоге у нас получится список аргументов, т.к. массивы расширятся до аргументов
alert( Math.max(1, ...arr1, 2, ...arr2, 25) ); // 25


// Превращение стркои в массив символов

let str = "Привет";

alert( [...str] ); // П,р,и,в,е,т
// Аналогичная реализация через преобразование в массив
alert( Array.from(str) ); // П,р,и,в,е,т



/*

Итого
Когда мы видим "..." в коде, это могут быть как остаточные параметры, так и оператор расширения.

Как отличить их друг от друга:

Если ... располагается в конце списка аргументов функции, то это «остаточные параметры». Он собирает остальные неуказанные аргументы и делает из них массив.
Если ... встретился в вызове функции или где-либо ещё, то это «оператор расширения». Он извлекает элементы из массива.
Полезно запомнить:

Остаточные параметры используются, чтобы создавать новые функции с неопределённым числом аргументов.
С помощью оператора расширения можно вставить массив в функцию, которая по умолчанию работает с обычным списком аргументов.
Вместе эти конструкции помогают легко преобразовывать наборы значений в массивы и обратно.

К аргументам функции можно обращаться и по-старому — через псевдомассив arguments.

*/
